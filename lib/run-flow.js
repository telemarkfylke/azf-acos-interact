const parseXml = require('./jobs/parse-xml')
const syncElevmappe = require('./jobs/sync-elevmappe')
const syncEmployee = require('./jobs/sync-employee')
const syncPrivatePerson = require('./jobs/sync-private-person')
const handleCase = require('./jobs/handle-case')
const archive = require('./jobs/archive')
const signOff = require('./jobs/sign-off')
// const sharepointList = require('./jobs/sharepoint-list')
const { logger, logConfig } = require('@vtfk/logger')
const { save } = require('@vtfk/azure-blob-client')
const { storageAccount, retryIntervalMinutes } = require('../config')
const blobOptions = {
  connectionString: storageAccount.connectionString,
  containerName: storageAccount.containerName
}

/* Retries forklart

flowStatus.runs er antall ganger flowen HAR kj칮rt. Den inkrementeres hver gang et nytt fors칮k er gjort
retryIntervals er en liste med hvor mange ganger vi skal pr칮ve p친 nytt. Alts친 hvis lista er 3 lang, s친 skal vi totalt kj칮re 4 ganger
For 친 slippe plusser og minuser legger vi derfor til et element f칮rst i retryIntervals for 친 representere den f칮rste kj칮ringen
F칮rste kj칮ring er kj칮ring 1 - men runs inkrementeres ikke f칮r vi er ferdige 친 pr칮ve kj칮ringen.
Feilh친ndteringen f친r s친 vite hvor mange ganger jobben er kj칮rt, og kan bruke flowStatus.runs som index for 친 sjekke hvor lenge vi skal vente til neste kj칮ring. Om (flowStatus.runs >= retryIntervals.length), s친 skal vi ikke pr칮ve mer, og kan gi error-beskjed
Dispatcheren trenger s친 bare sjekke hvor mange ganger vi har kj칮rt - og om det er st칮rre eller likt antall ganger vi skal kj칮re (retryIntervals.length siden den n친 er like lang som antall ganger vi skal kj칮re)

*/
const handleFailedJob = async (jobName, flowStatus, error) => {
  flowStatus.runs++
  const errorMsg = error.response?.data || error.stack || error.toString()
  flowStatus[jobName].error = errorMsg

  if (flowStatus.runs >= retryIntervalMinutes.length) {
    try {
      logger('error', ['Blob needs care and love', 'Failed in job', jobName, 'Runs:', `${flowStatus.runs}/${retryIntervalMinutes.length}`, 'Will not run again. Reset flowStatus.runs to try again', 'error:', errorMsg])
      await save(`${flowStatus.blobDir}/${flowStatus.refId}-flow-status.json`, JSON.stringify(flowStatus, null, 2), blobOptions)
    } catch (error) {
      logger('error', ['Dritt og m칮kk... vi fikk ikke lagret flowStatus til bloben. Ting vil potensielt bli kj칮rt dobbelt opp', 'jobben den stoppet p친:', jobName, 'Error', error.stack || error.toString()])
    }
    return
  }
  const minutesToWait = retryIntervalMinutes[flowStatus.runs]
  const now = new Date()
  flowStatus.nextRun = new Date(now.setMinutes(now.getMinutes() + minutesToWait)).toISOString()
  try {
    logger('warn', ['Failed in job', jobName, 'Runs:', `${flowStatus.runs}/${retryIntervalMinutes.length} Will retry in ${minutesToWait} minutes`, 'error:', errorMsg])
    await save(`${flowStatus.blobDir}/${flowStatus.refId}-flow-status.json`, JSON.stringify(flowStatus, null, 2), blobOptions)
  } catch (error) {
    logger('error', ['Dritt og m칮kk... vi fikk ikke lagret flowStatus til bloben. Ting vil potensielt bli kj칮rt dobbelt opp', 'jobben den stoppet p친:', jobName, 'Error', error.stack || error.toString()])
  }
}

module.exports = async (flowDef, flowStatus, blobs) => {
  // g친 gjennom flowDef og kj칮re alle jobbene som er definert i flowDef

  logConfig({
    prefix: `azf-acos-interact - run-flow - ${flowStatus.acosId} - ${flowStatus.acosName} - ${flowStatus.refId}`
  })
  {
    const jobName = 'parseXml'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await parseXml(blobs, flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'syncElevmappe'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await syncElevmappe(flowDef[jobName], flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'syncPrivatePerson'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await syncPrivatePerson(flowDef[jobName], flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'syncEmployee'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await syncEmployee(flowDef[jobName], flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'handleCase'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await handleCase(flowDef[jobName], flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'archive'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await archive(flowDef[jobName], flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  {
    const jobName = 'signOff'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        const result = await signOff(flowStatus)
        flowStatus[jobName].result = result
        flowStatus[jobName].jobFinished = true
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }

  // TODO after Easter eggs 游볰游볰游볰游볰: Sette opp jobb for avslutt sak
  {
    const jobName = 'failOnPurpose'
    if (!flowStatus.failed && flowDef[jobName]?.enabled && !flowStatus[jobName]?.jobFinished) {
      if (!flowStatus[jobName]) flowStatus[jobName] = { jobFinished: false }
      try {
        throw new Error('칁 feeijla med vilje!')
      } catch (error) {
        flowStatus.failed = true
        handleFailedJob(jobName, flowStatus, error)
      }
    }
  }
  // syncElevmappe
  // Pass p친 at jobben ikke kj칮rer om den allerede har feilet
  // sjekke om jobben skal kj칮res
  // sende med n칮dvendig flowStatus for 친 kj칮re jobben

  return flowDef
}
